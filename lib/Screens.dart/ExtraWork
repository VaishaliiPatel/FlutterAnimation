import 'package:flutter/material.dart';
// import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';

class StaggeredAnimation extends StatefulWidget {
  @override
  _StaggeredAnimationState createState() => _StaggeredAnimationState();
}

class _StaggeredAnimationState extends State<StaggeredAnimation>
    with SingleTickerProviderStateMixin {
  //this code for chnage recatengle asize and color.
  //AnimationController controller;
  // Animation colorAnimation;
  // Animation sizeAnimation;
  // @override
  // void initState() {
  //   super.initState();
  //   controller =
  //       AnimationController(vsync: this, duration: Duration(seconds: 2));
  //   controller.forward();
  //   controller.addListener(() {
  //     print("-------------------${controller.value}");
  //     colorAnimation =
  //         ColorTween(begin: Colors.blue, end: Colors.yellow).animate(
  //       CurvedAnimation(parent: controller, curve: Curves.bounceOut),
  //     );
  //     sizeAnimation =
  //         Tween<double>(begin: 100.0, end: 200.0).animate(controller);
  //     setState(() {});
  //   });
  // }
  // @override
  // Widget build(BuildContext context) {
  //   return Scaffold(
  //     appBar: AppBar(
  //       title: Text("Animation Demo"),
  //     ),
  //     body: Center(
  //       child: Container(
  //         height: sizeAnimation.value,
  //         width: sizeAnimation.value,
  //         color: colorAnimation.value,
  //       ),
  //     ),
  //   );
  // }
  var color = Colors.blue;
  var height = 100.0;
  var width = 100.0;
  AnimationController _controller;
  Animation sizeAnimation;
  Animation colorAnimation;

  @override
  void initState() {
    _controller = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
    );
    _controller.forward();
    _controller.addListener(() {
      print("--------------------${_controller.value}");
      // sizeAnimation = Tween(begin: 100.0, end: 300.0).animate(
      //     CurvedAnimation(parent: _controller, curve: Interval(0.0, 0.5)));
      // colorAnimation = ColorTween(begin: Colors.red, end: Colors.blue).animate(
      //     CurvedAnimation(parent: _controller, curve: Curves.bounceOut));
      setState(() {});
    });

    // _controller.forward().orCancel;
    super.initState();
  }

  Future<void> _playAnimation() async {
    try {
      await _controller.forward().orCancel;
      await _controller.reverse().orCancel;
    } on TickerCanceled {
      print("Cancel animation");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Staggered Animation Scrren"),
      ),
      body: GestureDetector(
        behavior: HitTestBehavior.opaque,
        onTap: () => _playAnimation,
        child: Center(
          child: Container(
            width: 300,
            height: 300,
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.1),
              border: Border.all(
                color: Colors.black.withOpacity(0.5),
              ),
            ),
            child: StaggerAnimation(controller: _controller.view),
          ),
        ),
      ),

      //     Center(
      //   child: Container(
      //     height: sizeAnimation.value,
      //     width: sizeAnimation.value,
      //     color: colorAnimation.value,
      //   ),
      // ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.ondemand_video_outlined),
        onPressed: () {
          setState(() {
            sizeAnimation = Tween(begin: 100.0, end: 300.0).animate(
                CurvedAnimation(
                    parent: _controller, curve: Interval(0.0, 0.5)));
            colorAnimation = ColorTween(begin: Colors.red, end: Colors.blue)
                .animate(CurvedAnimation(
                    parent: _controller, curve: Interval(0.5, 1.0)));
            // height:
          });
        },
      ),
    );
  }
}

class StaggerAnimation extends StatelessWidget {
  StaggerAnimation(
      {Key key,
      this.controller,
      this.width,
      this.height,
      this.padding,
      this.borderRadius,
      this.color})
      : opacity = Tween<double>(begin: 0.0, end: 1.0).animate(
          CurvedAnimation(
            parent: controller,
            curve: Interval(0.0, 0.1, curve: Curves.ease),
          ),
        ),
        super(key: key);

  final AnimationController controller;
  final Animation<double> opacity;
  final Animation<double> width;
  final Animation<double> height;
  final Animation<EdgeInsets> padding;
  final Animation<BorderRadius> borderRadius;
  final Animation<Color> color;

  Widget _buildAnimation(BuildContext ctx, Widget child) {
    return Container(
      padding: padding.value,
      alignment: Alignment.bottomCenter,
      child: Opacity(
        opacity: opacity.value,
        child: Container(
          width: width.value,
          height: height.value,
          decoration: BoxDecoration(
            color: color.value,
            border: Border.all(
              color: Colors.indigo[300],
              width: 3.0,
            ),
            borderRadius: borderRadius.value,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: controller,
      builder: _buildAnimation,
    );
  }
}
